# ** EXAM OBJECTIVE: QUERIES **
# GOAL: Use scroll API, search templates, script queries
# REQUIRED SETUP: 
# (i)  a running Elasticsearch cluster with at least one node and a 
#      Kibana instance,
# (ii) add the "Sample web logs" and "Sample flight data" to Kibana


# Search for all documents in all indices
# As above, but use the scroll API to return the first 100 results while keeping the search context alive for 2 minutes
# Use the scroll id included in the response to the previous query and retrieve the next batch of results
POST /_search?scroll=2m
{
  "size": 100,
  "query": {
    "match_all": {}
  }
}
POST /_search/scroll
{
  "scroll": "2m",
  "scroll_id" : "DnF1ZXJ5VGhlbkZldGNoBQAAAAAAACGzFmRvWGgzMDhvUWFtY244TEpWTGlJQ2cAAAAAAAAhtBZkb1hoMzA4b1FhbWNuOExKVkxpSUNnAAAAAAAAIbUWZG9YaDMwOG9RYW1jbjhMSlZMaUlDZwAAAAAAACG2FmRvWGgzMDhvUWFtY244TEpWTGlJQ2cAAAAAAAAhtxZkb1hoMzA4b1FhbWNuOExKVkxpSUNn"
}
### Run the next queries on the `kibana_sample_data_logs` index
#Filter documents with the `response` field greater or equal to 400
POST kibana_sample_data_logs/_search
{
  "query": {
    "bool": {
      "filter": {
        "range": {
          "response": {
            "gte": 400
          }
        }
      }
    }
  }
}
# Create a search template for the above query, so that the template 
#   (i) is named "with_response_and_tag", (ii) has a parameter "with_min_response" to represent the lower bound of the `response` field, (iii) has a parameter "with_max_response" to represent the upper bound of the `response` field, (iv) has a parameter "with_tag" to represent a possible value of the `tags` field
# Test the "with_response_and_tag" search template by setting the 
#   parameters as follows: (i) "with_min_response": 400, (ii) 
#   "with_max_response": 500 (iii) "with_tag": "security"
POST _scripts/with_response_and_tag
{
  "script": {
    "lang": "mustache",
    "source": {
      "query": {
        "bool": {
          "filter": [
            {
              "range": {
                "response": {
                  "gte": "{{with_min_response}}",
                  "lte": "{{with_max_response}}"
                }
              }
            },
            {
              "match": {
                "tags": "{{with_tag}}"
              }
            }
          ]
        }
      }
    }
  }
}
POST kibana_sample_data_logs/_search/template
{
  "id": "with_response_and_tag",
  "params": {
    "with_min_response": "400",
    "with_max_response": "500",
    "with_tag": "security"
  }
}
POST kibana_sample_data_logs/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "range": {
            "response": {
              "gte": 400,
              "lte": 500
            }
          }
        },
        {
          "match": {
            "tags": "security"
          }
        }
      ]
    }
  }
}
POST _scripts/with_response_and_tag
{
  "script": {
    "lang": "mustache",
    "source": """
{
      "query": {
        "bool": {
          "filter": [
            {
              "range": {
                "response": {
                  {{#with_min_response}}
                  "gte": "{{with_min_response}}"
                  {{#with_max_response}},{{/with_max_response}}
                  {{/with_min_response}}
                  {{#with_max_response}}
                  "lte": "{{with_max_response}}"
                  {{/with_max_response}}
                }
              }
            }
            {{#with_tag}},
          {
          "match": {
            "tags": "{{with_tag}}"
          }
        }{{/with_tag}}
          ]
        }
      }
    }
"""
  }
}
GET _scripts/with_response_and_tag
POST kibana_sample_data_logs/_search/template
{
  "id": "with_response_and_tag",
  "params": {
    "with_min_response": 400,
    "with_max_response": 600,
    "with_tag": "error"
  }
}
